package SpellAPI

function angleBetweenAngles(real a, real b) returns real
	var aa = a
	var bb = b
	if aa < 0.
		aa += 2.*bj_PI
	if bb < 0.
		bb += 2.*bj_PI
	var delta = bb - aa
	if delta < 0.
		delta += 2.*bj_PI
	else if delta > 2.*bj_PI
		delta -= 2.*bj_PI
	if delta > bj_PI
		return 2.*bj_PI - delta
	return delta

/** Helper for when you want to use Cone-like Spells */
public function isPointInCone(vec2 source, vec2 target, real coneRange, angle coneOrientation, angle coneAngleRange) returns boolean
	let dx = target.x - source.x
	let dy = target.y - source.y
	let dist = SquareRoot(dx*dx + dy*dy)
	if dist > coneRange
		return false
	let ang = Atan2(dy, dx)
	let angleDelta = angleBetweenAngles(ang, coneOrientation.radians())
	return angleDelta < coneAngleRange.radians()