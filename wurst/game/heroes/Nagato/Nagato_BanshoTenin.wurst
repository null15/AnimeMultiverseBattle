package Nagato_BanshoTenin

import objectIDs
import Pull
import ClosureTimers
import HashMap
import EntitySystem
import ClosureEvents
import SoundUtils
import SoundSystem

constant SoundDefinition snd_BanshoTenin			= new SoundDefinition("Nagato\\BanshoTenin\\BanshoTenin.mp3", false, true)
constant real BANSHO_PERIOD							= 0.03125
constant real BANSHO_STOP_RANGE						= 128.
constant real BANSHO_MIN_SPEED						= 300.
constant real BANSHO_FX_OFFSET						= 80.
constant string BANSHO_DIRT_FX						= "Nagato\\BanshoTenin\\BanshoTeninDragDirt.mdx"
constant angle BANSHO_DIRT_PITCH					= (0)	.fromDeg()
constant angle BANSHO_DIRT_ROLL						= (0)	.fromDeg()
constant angle BANSHO_DIRT_YAW_OFFSET				= (180)	.fromDeg()
constant int CASTER_ANIMATION_INDEX					= 13
constant real CASTER_ANIMATION_SPEED				= 1.5

constant HashMap<unit, BanshoTenin> active			= new HashMap<unit, BanshoTenin>()

class BanshoTenin
	unit caster
	unit target
	CallbackPeriodic cb
	effect dirtFx
	real elapsed
	boolean finished

	construct(unit caster, unit target)
		this.caster = caster
		this.target = target
		this.elapsed = 0.
		this.finished = false
		var speed = target.getMoveSpeed()
		if speed < BANSHO_MIN_SPEED
			speed = BANSHO_MIN_SPEED
		let pull = Pull.toUnit(target, caster, BANSHO_STOP_RANGE, speed)
		if pull == null
			this.finished = true
			if this.caster != null and this.caster.isAlive()
				this.caster.issueImmediateOrder("stop")
		else
			playSound(snd_BanshoTenin, this.caster.getPos3Real(), 700)
			this.dirtFx = addEffect(BANSHO_DIRT_FX, target.getPos3Real())
			this.updateDirtEffect(this.caster.getPos(), this.target.getPos())
			this.cb = doPeriodically(BANSHO_PERIOD) (CallbackPeriodic c) ->
				this.update()

	function isActive() returns boolean
		return not this.finished

	function update()
		if this.finished
			return
		if this.caster == null or not this.caster.isAlive()
			this.stop(true)
			return
		if this.target == null or not this.target.isAlive()
			this.stop(true)
			return
		let casterPos = this.caster.getPos()
		let targetPos = this.target.getPos()
		let diff = casterPos - targetPos
		let dist = diff.length()
		if dist <= BANSHO_STOP_RANGE
			this.stop(true)
			return
		this.elapsed += BANSHO_PERIOD
		if this.caster.isEnemyOf(this.target)
			let rawLevel = this.caster.getAbilityLevel(NAGATO_BANSHO_TENIN)
			let lvl = rawLevel > 0 ? rawLevel.toReal() : 1.
			let baseDps = 14. + 6. * lvl
			let rampDps = 8. + 3. * lvl
			let damage = (baseDps + rampDps * this.elapsed) * BANSHO_PERIOD
			this.caster.damageTarget(this.target, damage, ATTACK_TYPE_HERO)
		else
			this.target.clearTimedPause()
			UnitRemoveBuffsEx(this.target, false, true, true, true, true, true, true)
			let defaultSpeed = this.target.getDefaultMovespeed()
			if this.target.getMoveSpeed() < defaultSpeed
				this.target.setMoveSpeed(defaultSpeed)
		var appliedSpeed = this.target.getMoveSpeed()
		if appliedSpeed < BANSHO_MIN_SPEED
			appliedSpeed = BANSHO_MIN_SPEED
		let pull = Pull.getActive(this.target)
		if pull == null
			this.stop(true)
			return
		pull.speed = appliedSpeed
		this.updateDirtEffect(casterPos, targetPos)

	function stop(boolean orderCaster)
		if this.finished
			return
		this.finished = true
		if orderCaster and this.caster != null and this.caster.isAlive()
			this.caster.issueImmediateOrder("stop")
		if this.cb != null
			destroy this.cb
			this.cb = null
		if this.target != null
			Pull.stopActive(this.target)
		if this.dirtFx != null
			this.dirtFx..setPos(vec2(-99999, -99999))..destr()
			this.dirtFx = null
		if this.caster != null and active.has(this.caster)
			active.remove(this.caster)
		this.caster = null
		this.target = null
		destroy this

	function updateDirtEffect(vec2 casterPos, vec2 targetPos)
		if this.dirtFx == null or this.target == null
			return
		let yaw = casterPos.angleTo(targetPos)
		let behindPos = casterPos.distanceToSq(targetPos) > 0. ? targetPos + yaw.toVec(BANSHO_FX_OFFSET) : targetPos
		let groundPos = this.target.getPos3Real()
		this.dirtFx
		..setPos(vec3(behindPos.x, behindPos.y, groundPos.z))
		..setOrientation(yaw + BANSHO_DIRT_YAW_OFFSET, BANSHO_DIRT_PITCH, BANSHO_DIRT_ROLL)

	ondestroy
		this.cb = null
		this.dirtFx = null

function onChannel()
	if GetSpellAbilityId() == NAGATO_BANSHO_TENIN
		let caster = GetTriggerUnit()
		if caster == null
			printTimedToPlayer("Caster invalid, aborting spell cast", 3, caster.getOwner())
			return
		let target = GetSpellTargetUnit()
		if target == null // or not target.isType(UNIT_TYPE_HERO)
			printTimedToPlayer("Target invalid, aborting spell cast", 3, caster.getOwner())
			return
		if active.has(caster)
			active.get(caster).stop(false)
		let inst = new BanshoTenin(caster, target)
		nullTimer() -> 
			caster
			..setAnimation(CASTER_ANIMATION_INDEX)
			..setTimeScale(CASTER_ANIMATION_SPEED)
		if inst.isActive()
			active.put(caster, inst)
		else
			destroy inst

function onStop()
	if GetSpellAbilityId() == NAGATO_BANSHO_TENIN
		let caster = GetTriggerUnit()
		if caster != null and active.has(caster)
			active.get(caster).stop(false)

init
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_CHANNEL, () -> onChannel())
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_ENDCAST, () -> onStop())
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_FINISH, () -> onStop())