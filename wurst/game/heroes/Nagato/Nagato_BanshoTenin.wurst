package Nagato_BanshoTenin

import objectIDs
import Pull
import ClosureTimers
import HashMap
import EntitySystem
import EffectsSystem
import ClosureEvents
import SoundSystem
import TimeStopSpell
import TimeStop

constant string SOUND_LABEL_BANSHO_TENIN            = "NagatoBanshoTenin"
constant SoundProfile snd_BanshoTenin				= new SoundProfile("Nagato\\BanshoTenin\\BanshoTenin.mp3", SOUND_LABEL_BANSHO_TENIN, false, true)
constant real BANSHO_PERIOD							= 0.03125
constant real BANSHO_STOP_RANGE						= 128.
constant real BANSHO_MIN_SPEED						= 300.
constant real BANSHO_FX_OFFSET						= 80.
constant real BANSHO_SOUND_RADIUS					= 700.
constant real BANSHO_PULL_DURATION					= 6.
constant string BANSHO_DIRT_FX						= "Nagato\\BanshoTenin\\BanshoTeninDragDirt.mdx"
constant angle BANSHO_DIRT_PITCH					= (0)	.fromDeg()
constant angle BANSHO_DIRT_ROLL						= (0)	.fromDeg()
constant angle BANSHO_DIRT_YAW_OFFSET				= (180)	.fromDeg()
constant int CASTER_ANIMATION_INDEX					= 13
constant real CASTER_ANIMATION_SPEED				= 1.5
constant HashMap<unit, BanshoTenin> active			= new HashMap<unit, BanshoTenin>()

class BanshoTenin extends ChannelSpell
	unit target
	EffectsEntity dirtFx
	Pull pull
	real elapsed

	construct(unit caster, unit target)
		super(caster, NAGATO_BANSHO_TENIN, BANSHO_PERIOD)
		this.target = target
		this.elapsed = 0.
		this.addTarget(target)
		var speed = target.getMoveSpeed()
		if speed < BANSHO_MIN_SPEED
			speed = BANSHO_MIN_SPEED
		this.pull = Pull.toUnit(target, caster, BANSHO_STOP_RANGE, speed)
		if this.pull == null
			if caster != null and caster.isAlive()
				caster.issueImmediateOrder("stop")
		else
			print("Pull")
			this.beginChannel(BANSHO_PULL_DURATION)
			this.setChannelSound(snd_BanshoTenin.playChannelForUnit(caster, NAGATO_BANSHO_TENIN, BANSHO_SOUND_RADIUS))
			this.dirtFx = addEffectEntity(BANSHO_DIRT_FX, target.getPos3Real())
			if this.dirtFx != null
				this.registerEffectWithUnit(this.dirtFx, caster)
				this.registerEffectWithUnit(this.dirtFx, target)
				this.updateDirtEffect(caster.getPos(), target.getPos())
			this.startTicking()

	override function onChannelTick()
		let casterUnit = this.getCaster()
		if casterUnit == null or not casterUnit.isAlive()
			this.finishChannel(true)
			return
		if this.target == null or not this.target.isAlive()
			this.finishChannel(true)
			return
		let casterPos = casterUnit.getPos()
		let targetPos = this.target.getPos()
		if casterPos.distanceTo(targetPos) <= BANSHO_STOP_RANGE
			this.finishChannel(true)
			return
		this.elapsed += this.getTickPeriod()
		if casterUnit.isEnemyOf(this.target)
			let rawLevel = casterUnit.getAbilityLevel(NAGATO_BANSHO_TENIN)
			let lvl = rawLevel > 0 ? rawLevel.toReal() : 1.
			let baseDps = 14. + 6. * lvl
			let rampDps = 8. + 3. * lvl
			let damage = (baseDps + rampDps * this.elapsed) * this.getTickPeriod()
			casterUnit.damageTarget(this.target, damage, ATTACK_TYPE_HERO)
		else
			this.target.clearTimeStop()
			this.target.clearTimedPause()
			UnitRemoveBuffsEx(this.target, false, true, true, true, true, true, true)
			let defaultSpeed = this.target.getDefaultMovespeed()
			if this.target.getMoveSpeed() < defaultSpeed
				this.target.setMoveSpeed(defaultSpeed)
		var appliedSpeed = this.target.getMoveSpeed()
		if appliedSpeed < BANSHO_MIN_SPEED
			appliedSpeed = BANSHO_MIN_SPEED
		let activePull = Pull.getActive(this.target)
		if activePull == null
			this.finishChannel(true)
			return
		activePull.speed = appliedSpeed
		this.updateDirtEffect(casterPos, targetPos)

	override function onChannelFinish(boolean orderCaster) returns boolean
		if this.target != null
			Pull.stopActive(this.target)
		if orderCaster
			let casterUnit = this.getCaster()
			if casterUnit != null and casterUnit.isAlive()
				casterUnit.issueImmediateOrder("stop")
		return true

	function updateDirtEffect(vec2 casterPos, vec2 targetPos)
		if this.dirtFx == null or this.target == null
			return
		let yaw = casterPos.angleTo(targetPos)
		let behindPos = casterPos.distanceToSq(targetPos) > 0. ? targetPos + yaw.toVec(BANSHO_FX_OFFSET) : targetPos
		let groundPos = this.target.getPos3Real()
		this.dirtFx.setPosition(vec3(behindPos.x, behindPos.y, groundPos.z))
		let actor = this.dirtFx.getActor()
		if actor != null
			actor.setOrientation(yaw + BANSHO_DIRT_YAW_OFFSET, BANSHO_DIRT_PITCH, BANSHO_DIRT_ROLL)

	override function onCleanup()
		let casterUnit = this.getCaster()
		if casterUnit != null and active.has(casterUnit)
			if active.get(casterUnit) == this
				active.remove(casterUnit)
		this.dirtFx = null
		this.target = null
		this.pull = null

function onChannel()
	if GetSpellAbilityId() == NAGATO_BANSHO_TENIN
		let caster = GetTriggerUnit()
		if caster == null
			printTimedToPlayer("Caster invalid, aborting spell cast", 3, caster.getOwner())
			return
		let target = GetSpellTargetUnit()
		if target == null
			printTimedToPlayer("Target invalid, aborting spell cast", 3, caster.getOwner())
			return
		if active.has(caster)
			active.get(caster).stop(false)
		let inst = new BanshoTenin(caster, target)
		if inst != null and inst.isChannelActive()
			active.put(caster, inst)
			nullTimer() ->
				caster
				..setAnimation(CASTER_ANIMATION_INDEX)
				..setEntityTimeScale(CASTER_ANIMATION_SPEED)
		else if inst != null
			destroy inst

function onStop()
	if GetSpellAbilityId() == NAGATO_BANSHO_TENIN
		let caster = GetTriggerUnit()
		if caster != null and active.has(caster)
			active.get(caster).finishChannel(false)

init
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_CHANNEL, () -> onChannel())
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_ENDCAST, () -> onStop())