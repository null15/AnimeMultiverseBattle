package Nagato_ShinraTensei

import objectIDs
import Knockback
import RegisterEvents
import Missiles
import ClosureForGroups
import ClosureTimers
import HashMap
import TerrainUtils
import HashSet

constant HashMap<unit, ShinraTensei> active = new HashMap<unit, ShinraTensei>()

class ShinraTensei
	unit caster
	real remaining
	CallbackPeriodic cb
	HashSet<unit> affected

	construct(unit caster)
		this.caster = caster
		this.remaining = 2.
		this.affected = new HashSet<unit>
		this.cb = doPeriodically(0.1) (CallbackPeriodic c) ->
			this.tick()

	function tick()
		if caster == null or not caster.isAlive()
			stop()
			return
		this.remaining -= 0.1
		if this.remaining <= 0
			stop()
			return
		let center = caster.getPos()
		forUnitsInRange(center, 500.) (unit u) ->
			if caster.isEnemyOf(u)
				caster.damageTarget(u, 1., ATTACK_TYPE_HERO)
				let angle = center.angleTo(u.getPos())
				if affected.has(u)
					let v = Knockback3.getVel(u)
					let vz = v.z / ANIMATION_PERIOD
					let speed = SquareRoot(800. * 800. + vz * vz)
					let air = 800..atan2(vz).fromRad()
					Knockback3.setVel(u, speed, angle, air)
				else
					Knockback3.setVel(u, 800., angle, (30.).fromDeg())
					affected.add(u)
				this.checkCollision(u)
		for m in Missiles.collection
			if m.owner != caster.getOwner()
				let mPos = m.getPos().toVec2()
				if mPos.distanceTo(center) <= 500.
					let target = mPos + (mPos - center)
					m.deflect(target)

	function checkCollision(unit u)
		if not u.getPos().isTerrainWalkable()
			this.applyCollision(u)
			return
		forUnitsInRange(u.getPos(), 128.) (unit rod) ->
			if rod.getTypeId() == NAGATO_UZUMAKI_BINDDUMMY
				this.applyCollision(u)

	function applyCollision(unit u)
		caster.damageTarget(u, 20., ATTACK_TYPE_HERO)
		let baseSpeed = u.getMoveSpeed()
		u.setMoveSpeed(baseSpeed * 0.6)
		doAfter(2.) ->
			if u != null
				u.setMoveSpeed(baseSpeed)

	function stop()
		if cb != null
			destroy cb
			cb = null
		active.remove(caster)
		if affected != null
			destroy affected
			affected = null
		destroy this

function onCast()
	if GetSpellAbilityId() == NAGATO_SHINRA_TENSEI
		let caster = GetTriggerUnit()
		let inst = new ShinraTensei(caster)
		active.put(caster, inst)

function onStop()
	if GetSpellAbilityId() == NAGATO_SHINRA_TENSEI
		let caster = GetTriggerUnit()
		if active.has(caster)
			active.get(caster).stop()

init
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT, () -> onCast())
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_ENDCAST, () -> onStop())
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_FINISH, () -> onStop())