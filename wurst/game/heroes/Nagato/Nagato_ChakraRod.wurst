package Nagato_ChakraRod

import EntityManagement
import EntitySystem
import objectIDs
import BindingProjectileSystem
import Tether
import ClosureTimers

constant angle CHAKRA_ROD_PITCH							= (80).fromDeg()
constant angle CHAKRA_ROD_ROLL							= (0).fromDeg()
constant real CHAKRA_ROD_HEIGHT_OFFSET					= 75.
constant real CHAKRA_ROD_THROW_OFFSET					= 75.
constant real CHAKRA_ROD_BIND_DISTANCE					= 150.
constant real CHAKRA_ROD_MISSILE_SPEED					= 1400.
constant real CHAKRA_ROD_COLLISION						= 124.
constant real CHAKRA_ROD_PROJECTILE_SCALE				= 2.
constant bool REQUIRE_HERO_TARGET						= false
constant bool REQUIRE_ENEMY_TARGET						= false
constant string CHAKRA_ROD_MODEL_PATH					= "Nagato\\Chakra Rod\\ChakraRod.mdx"
constant string CHAKRA_ROD_BLOOD_FX						= "Objects\\Spawnmodels\\Human\\HumanBlood\\HeroBloodElfBlood.mdx"
constant int CASTER_ANIMATION_INDEX						= 9
constant real CASTER_ANIMATION_SPEED					= 3

// ---------------------------------------------------- //

AnchorVisualSetup chakraRodVisualSetup = new AnchorVisualSetup(
	CHAKRA_ROD_MODEL_PATH,
	2.,
	CHAKRA_ROD_HEIGHT_OFFSET,
	CHAKRA_ROD_PITCH,
	CHAKRA_ROD_ROLL)

BindingProjectileConfig chakraRodConfig = null

// ---------------------------------------------------- //

function bindDuration(unit caster, unit _target) returns real
	let level = caster.getAbilityLevel(NAGATO_UZUMAKI_BIND)
	return level > 0 ? 0.7 * level.toReal() : 0.

function onImpact(BindingProjectile projectile, unit victim) returns bool
	var rodOwner = projectile.getOwner()
	if rodOwner == null
		rodOwner = Player(PLAYER_NEUTRAL_PASSIVE)
	let rod = Unit.create(rodOwner, NAGATO_UZUMAKI_CHAKRA_ROD, victim.getPos())
	let yaw = projectile.getFacingYaw(victim)
	rod.setFacing(yaw)
	rod.setVertexColor(255, 255, 255, 0)
	projectile.applyAnchorVisual(rod, victim, chakraRodVisualSetup)
	Tether.bindTimed(victim, rod, CHAKRA_ROD_BIND_DISTANCE, projectile.getBindDuration())
	let blood = addEffect(CHAKRA_ROD_BLOOD_FX, victim.getPos3Real())
	if blood != null
		blood..destr()
	return true

function chakraRod_config()
	if chakraRodConfig != null
		return
	chakraRodConfig = new BindingProjectileConfig(CHAKRA_ROD_MODEL_PATH, CHAKRA_ROD_COLLISION, CHAKRA_ROD_MISSILE_SPEED)
	chakraRodConfig.projectileScale						= CHAKRA_ROD_PROJECTILE_SCALE
	chakraRodConfig.heightOffset						= CHAKRA_ROD_HEIGHT_OFFSET
	chakraRodConfig.forwardOffset						= CHAKRA_ROD_THROW_OFFSET
	chakraRodConfig.requireHeroTarget					= REQUIRE_HERO_TARGET
	chakraRodConfig.requireEnemyTarget					= REQUIRE_ENEMY_TARGET
	chakraRodConfig.durationProvider					= (unit caster, unit target) -> bindDuration(caster, target)
	chakraRodConfig.impactHandler						= (BindingProjectile projectile, unit victim) -> onImpact(projectile, victim)

function onCast()
	if GetSpellAbilityId() == NAGATO_UZUMAKI_BIND
		let caster = GetTriggerUnit()
		if caster == null
			printTimedToPlayer("Caster invalid, aborting spell cast", 3, caster.getOwner())
			return
		let target = GetSpellTargetUnit()
		if target == null
			printTimedToPlayer("Target invalid, aborting spell cast", 3, caster.getOwner())
			return
		doAfter(0.1) -> // Delay so animation can fit in
			chakraRod_config()
			launchBindingProjectile(caster, target, chakraRodConfig)
		nullTimer() -> 
			caster
			..setAnimation(CASTER_ANIMATION_INDEX)
			..setTimeScale(CASTER_ANIMATION_SPEED)

init
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT, () -> onCast())