package DraftAPI

import TableLayout
import GridTableWrapper
import LinkedList
import HashMap
import FlowGrid
import FramePos
import ClosureTimers

/* 
 * Core draft setup system.  
 * Handles hero registration, player UI state,  
 * category/page buttons, and refreshing the hero grid. 
*/

/** Standard button size (heroes). */
public real heroIconSize = 0.059
/** Smaller button size (compact layout). */
public real categoryPageSize = 0.035

public constant real DRAFT_REFRESH_DEBOUNCE = 0.12 /* Debounce time to coalesce spam clicks (seconds). */
constant real ANIMATION_SPEED_DURATION = 0.75
public constant int MAX_CATEGORIES = 8
public constant int MAX_PAGES = 3
constant int PER_PAGE = 30   // heroes per page

/** Per-player draft UI state. */
HashMap<int, DraftUIState> uiState = new HashMap<int, DraftUIState>()

/** Global list of all registered heroes (draft pool). */
LinkedList<HeroDraft> allHeroes = new LinkedList<HeroDraft>()

/** Lookup from hero id → HeroDraft. */
HashMap<int, HeroDraft> heroById = new HashMap<int, HeroDraft>()

/** References to category buttons (1..MAX_CATEGORIES). */
public framehandle array categoryBtns   

/** References to page buttons (1..MAX_PAGES). */
public framehandle array pageBtns       

/** Grid wrapper containing hero buttons. */
public GridCell heroGrid = null

/** Frames currently visible in the grid (local player only). */
public LinkedList<framehandle> shownNow = new LinkedList<framehandle>()

/** Map hero id -> its button frame (decouples data from view). */
public HashMap<int, framehandle> heroBtnById = new HashMap<int, framehandle>()

/** Optional: per-player search query (kept outside DraftUIState to avoid class edits). */
HashMap<int, string> searchByPid = new HashMap<int, string>()

/** Registered listeners for hero pick events. */
LinkedList<HeroPickListener> pickListeners = new LinkedList<HeroPickListener>()

CategoryType array categoryTypeArray

/** Per-player "a refresh is already scheduled" flag. */
HashMap<int, boolean> refreshScheduled = new HashMap<int, boolean>()

public string array catTex
public string array catTexOn        // <— NEW: selected state art
public string array catTexDisabled
public framehandle array categoryBtnIcons  // <— the actual BACKDROP we’ll texture-swap

// Returns the BACKDROP child called "pickIcon" inside the img button.
public function getButtonIcon(framehandle btn) returns framehandle
    let n = btn.getChildrenCount()
    for i = 0 to n - 1
        let ch = btn.getChild(i)
        if ch != null and ch.getName() == "pickIcon"
            return ch
    return null

/** Schedule one refresh for this player after a small delay. */
public function scheduleRefresh(int pid)
    // If already scheduled, just let the queued one run (state has already been updated)
    if refreshScheduled.has(pid) and refreshScheduled.get(pid)
        return

    refreshScheduled.put(pid, true)
    doAfter(DRAFT_REFRESH_DEBOUNCE) ->
        refreshScheduled.put(pid, false)
        refreshGrid(pid)

/** Compare two heroes by (name, aftername), case-insensitive. */
public function compareFullNames(HeroDraft a, HeroDraft b) returns int
    let c1 = stringCompare(a.nameKey, b.nameKey)
    if c1 != 0
        return c1
    return stringCompare(a.afterKey, b.afterKey)

constant Comparator<HeroDraft> heroComparator = (a, b) -> compareFullNames(a, b)

public function sortAllHeroesOnce()
    allHeroes.sortWith(heroComparator)

/** Selected hero per player (for ON/TRUE highlight). */
HashMap<int, int> selectedHeroByPid = new HashMap<int, int>()

/** Mark hero button selected/unselected by text color + check glyph. */
public function setButtonSelected(framehandle f, string baseText, boolean on)
    if on
        BlzFrameSetText(f, "|cff81b862✓ " + baseText + "|r")
    else
        BlzFrameSetText(f, baseText)

/** Refresh ON/TRUE visuals for hero buttons for the local player. */
public function updateHeroSelectionVisual(int pid)
    if GetLocalPlayer() != Player(pid)
        return
    let sel = selectedHeroByPid.get(pid)
    for h in allHeroes
        let f = heroBtnById.get(h.unitID)
        if f != null
            let on = sel != 0 and sel == h.unitID
            setButtonSelected(f, h.fullName(), on)

/** 
 * Per-player draft UI state.  
 * Stores which categories are selected,  
 * current page index, and max page available. 
 */
class DraftUIState
    LinkedList<CategoryType> categories
    int currentPage
    int maxPage

    construct()
        categories = new LinkedList<CategoryType>()
        currentPage = 1
        maxPage = 1

/** Add Category Type to Hero */
public enum CategoryType
    STRENGTH
    AGILITY
    INTELLIGENCE
    BRUISER
    CARRY
    SUPPORT
    MELEE
    RANGE

/** 
 * Hero draft entry.  
 * Wraps hero metadata (id, name, franchise, ranged flag, categories)  
 * and stores a reference to the button frame. 
 */
public class HeroDraft
    int unitID
    string name
    string aftername
    string franchise
    LinkedList<CategoryType> categories
    framehandle btn

    // cached sort keys (lowercased once)
    string nameKey
    string afterKey

    construct()
        this.unitID = 0
        this.name = ""
        this.aftername = ""
        this.franchise = ""
        this.categories = new LinkedList<CategoryType>()
        this.btn = null
        this.nameKey = ""
        this.afterKey = ""

    construct(int unitID, string name, string aftername, string franchise)
        this.unitID = unitID
        this.name = name
        this.aftername = aftername
        this.franchise = franchise
        this.categories = new LinkedList<CategoryType>()
        this.btn = null
        this.nameKey = name.toLowerCase()
        this.afterKey = aftername.toLowerCase()

    function fullName() returns string
        if aftername != ""
            return name + " " + aftername
        return name

    /** Adds categories to this hero, up to 30 unique categories. */
    function addCategory(vararg CategoryType categories) returns LinkedList<CategoryType>
        for category in categories
            if this.categories.size() >= 30
                return this.categories
            if not this.categories.has(category)
                this.categories.add(category)
        return this.categories

    /**
     * Register a hero into the draft pool (append only; sorting happens once later).
     */
    function addHero(int id, string name, string aftername, string franchise)
        this.unitID = id
        this.name = name
        this.aftername = aftername
        this.franchise = franchise
        this.nameKey = name.toLowerCase()
        this.afterKey = aftername.toLowerCase()

        if name == ""
            print("|cffff0000addHero: name cannot be empty.|r")
            return

        if heroById.has(id)
            print("|cffff0000Duplicate hero id:|r " + id.toString() + " — ignoring second registration.")
            return

        // append (no ordered insert here)
        allHeroes.add(this)
        heroById.put(this.unitID, this)

public interface HeroPickListener
    function onHeroPicked(int pid, int unitID)

public function addHeroPickListener(HeroPickListener l)
    if l != null
        pickListeners.add(l)

public function notifyHeroPicked(int pid, int unitID)
    for l in pickListeners
        l.onHeroPicked(pid, unitID)

/** Associate a pre-created button with a hero id. */
public function setHeroButton(int id, framehandle f)
    if f != null
        heroBtnById.put(id, f)

/** Get the button frame for a hero id, or null if not set. */
public function getHeroButton(int id) returns framehandle
    let f = heroBtnById.get(id)
    if f != null
        return f

    let h = heroById.get(id)
    if h == null
        return null

    let b = btn(h.fullName())..setHeight(heroIconSize)..setWidth(heroIconSize)

    // wire here, once, when the button is created
    let hid = id
    b.onClick() ->
        let pid = GetPlayerId(GetTriggerPlayer())
        selectedHeroByPid.put(pid, hid)
        updateHeroSelectionVisual(pid)
        notifyHeroPicked(pid, hid)

    heroBtnById.put(id, b)
    return b

public function setSearchQuery(int pid, string q)
    var s = q
    if s == null
        s = ""
    searchByPid.put(pid, s)

public function getSearchQuery(int pid) returns string
    let s = searchByPid.get(pid)
    if s == null
        return ""
    return s

/** Name/franchise substring match (case-insensitive). Empty query always matches. */
public function heroMatchesQuery(HeroDraft h, string q) returns bool
    if q == ""
        return true
    let s = q.toLowerCase()
    if h.name.toLowerCase().contains(s)
        return true
    if h.aftername.toLowerCase().contains(s)
        return true
    if h.franchise.toLowerCase().contains(s)
        return true
    return false

/** 
 * Ensure a DraftUIState exists for a player.  
 * Creates and inserts one if missing. 
 */
public function getOrCreateState(int pid) returns DraftUIState
    let st = uiState.get(pid)
    if st == null
        let ns = new DraftUIState()
        uiState.put(pid, ns)
        return ns
    return st

/** 
 * Checks if hero matches all selected categories.  
 * Empty selection always matches. 
 */
public function matchesAll(HeroDraft h, LinkedList<CategoryType> selected) returns bool
    if selected.isEmpty()
        return true
    for cat in selected
        if not h.categories.has(cat)
            return false
    return true

/** Count heroes matching current filters (categories + search) for a player. */
public function countFiltered(int pid) returns int
    let st = getOrCreateState(pid)
    let q = getSearchQuery(pid)
    var n = 0
    for h in allHeroes
        if matchesAll(h, st.categories) and heroMatchesQuery(h, q)
            n++
    return n

public function updateCategoryButtons(int pid)
    let st = getOrCreateState(pid)

    if GetLocalPlayer() != Player(pid)
        return

    for i = 1 to MAX_CATEGORIES
        let btn = categoryBtns[i]
        if btn != null
            let cat = categoryTypeArray[i]          // CategoryType (not string)
            let isSelected = st.categories.has(cat)
            let canAdd    = countIfAddedFast(pid, cat) > 0
            let enabled   = isSelected or canAdd

            BlzFrameSetEnable(btn, enabled)

            let icon = categoryBtnIcons[i]
            if icon != null
                if isSelected
                    // ON (selected)
                    icon.setTexture(catTexOn[i], 0, true)
                else
                    if canAdd
                        // OFF but available
                        icon.setTexture(catTex[i], 0, true)
                    else
                        // DISABLED (would yield 0 results)
                        icon.setTexture(catTexDisabled[i], 0, true)

/** Clamp a page number into range [1..maxP]. */
public function clampPage(int page, int maxP) returns int
    if page < 1
        return 1
    if page > maxP
        return maxP
    return page

/** 
 * Update enabled/disabled state of page buttons for a player.  
 * Runs locally (per player). 
 */
public function updatePageButtons(int pid)
    let st = getOrCreateState(pid)
    if GetLocalPlayer() == Player(pid)
        for i = 1 to MAX_PAGES
            if pageBtns[i] != null
                if i <= st.maxPage
                    BlzFrameSetEnable(pageBtns[i], true)
                else
                    BlzFrameSetEnable(pageBtns[i], false)

/**
 * Refresh hero grid for a player.
 * Now uses heroBtnById instead of h.btn, cancels old anims,
 * and clears tracked pos for new frames so they animate in.
 */
public function refreshGrid(int pid)
    let st = getOrCreateState(pid)
    let total = countFiltered(pid)

    var maxP = (total + PER_PAGE - 1) div PER_PAGE
    if maxP < 1
        maxP = 1
    st.maxPage = maxP
    st.currentPage = clampPage(st.currentPage, st.maxPage)

    updatePageButtons(pid)
    updateCategoryButtons(pid) // <— new (see section 2)

    if GetLocalPlayer() != Player(pid)
        return

    // Compute streaming window
    let q = getSearchQuery(pid)
    let startIdx = (st.currentPage - 1) * PER_PAGE
    let endIdx = startIdx + PER_PAGE - 1

    // Stream matches and capture only the current page
    framehandle array pageBuf
    var pageCount = 0
    var matchIdx = 0
    for h in allHeroes
        if matchesAll(h, st.categories) and heroMatchesQuery(h, q)
            if matchIdx >= startIdx and matchIdx <= endIdx
                let f = getHeroButton(h.unitID)
                if f != null
                    pageBuf[pageCount] = f
                    pageCount++
            matchIdx++

    // Remove everything currently shown
    for f in shownNow
        heroGrid.remove(f)
        BlzFrameSetVisible(f, false)

    cancelGridAnimations()

    // Add new frames in order and seed their spawn pos
    for i = 0 to pageCount - 1
        let f = pageBuf[i]
        BlzFrameSetVisible(f, true)
        heroGrid.add(f)
        BlzFrameSetAlpha(f, 0)
        setRelativePointTracked(f, FRAMEPOINT_TOPLEFT, 0.0, 0.0)

    // Rebuild our tracking (small, bounded)
    shownNow.clear()
    for i = 0 to pageCount - 1
        shownNow.add(pageBuf[i])

    heroGrid.layoutAnimated(ANIMATION_SPEED_DURATION)
    updateHeroSelectionVisual(pid)

// DraftAPI.wurst
public function wouldMatchWithExtra(HeroDraft h, LinkedList<CategoryType> selected, CategoryType extra) returns bool
    // Must match all currently selected
    for c in selected
        if not h.categories.has(c)
            return false
    // If extra already selected, it doesn't further restrict
    for c in selected
        if c == extra
            return true
    // Otherwise, hero must also have the extra category
    return h.categories.has(extra)

public function countIfAddedFast(int pid, CategoryType cat) returns int
    let st = getOrCreateState(pid)
    let q = getSearchQuery(pid)
    var n = 0
    for h in allHeroes
        if heroMatchesQuery(h, q) and wouldMatchWithExtra(h, st.categories, cat)
            n++
    return n

/** Toggle categories and refresh; also updates button enabled-states. */
public function wireCategoryButtons()
    for i = 1 to MAX_CATEGORIES
        if categoryBtns[i] != null
            let idx = i
            categoryBtns[idx].onClick() ->
                let pid = GetPlayerId(GetTriggerPlayer())
                let st = getOrCreateState(pid)
                let cname = categoryTypeArray[idx]
                if st.categories.has(cname)
                    st.categories.remove(cname)
                else
                    st.categories.add(cname)
                st.currentPage = 1
                updateCategoryButtons(pid)
                scheduleRefresh(pid)

/** 
 * Wire page buttons to change pages.  
 * Ignores clicks if target page is greater than maxPage. 
 */
// DraftAPI.wurst – paging wireup
public function wirePageButtons()
    for i = 1 to MAX_PAGES
        if pageBtns[i] != null
            let idx = i
            pageBtns[idx].onClick() ->
                let pid = GetPlayerId(GetTriggerPlayer())
                let st = getOrCreateState(pid)
                if idx <= st.maxPage
                    st.currentPage = idx
                    scheduleRefresh(pid)

init
    categoryTypeArray[1] = CategoryType.STRENGTH
    categoryTypeArray[2] = CategoryType.AGILITY
    categoryTypeArray[3] = CategoryType.INTELLIGENCE
    categoryTypeArray[4] = CategoryType.BRUISER
    categoryTypeArray[5] = CategoryType.CARRY
    categoryTypeArray[6] = CategoryType.SUPPORT
    categoryTypeArray[7] = CategoryType.MELEE
    categoryTypeArray[8] = CategoryType.RANGE