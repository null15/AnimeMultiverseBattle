package DraftAPI

import TableLayout
import GridTableWrapper
import LinkedList
import HashMap
import FlowGrid

/* 
 * Core draft setup system.  
 * Handles hero registration, player UI state,  
 * category/page buttons, and refreshing the hero grid. 
*/

/** Standard button size (heroes). */
public real heroIconSize = 0.059
/** Larger button size (e.g. featured heroes). */
public real sizeBig = 0.05
/** Smaller button size (compact layout). */
public real categoryPageSize = 0.035

public constant int MAX_CATEGORIES = 8
public constant int MAX_PAGES = 3
constant int PER_PAGE = 30   // heroes per page

/** Per-player draft UI state. */
HashMap<int, DraftUIState> uiState = new HashMap<int, DraftUIState>()

/** Global list of all registered heroes (draft pool). */
LinkedList<HeroDraft> allHeroes = new LinkedList<HeroDraft>()

/** Lookup from hero id → HeroDraft. */
HashMap<int, HeroDraft> heroById = new HashMap<int, HeroDraft>()

/** References to category buttons (1..MAX_CATEGORIES). */
public framehandle array categoryBtns   

/** References to page buttons (1..MAX_PAGES). */
public framehandle array pageBtns       

/** Grid wrapper containing hero buttons. */
public GridCell heroGrid = null

/** Frames currently visible in the grid (local player only). */
public LinkedList<framehandle> shownNow = new LinkedList<framehandle>()

/** Map hero id -> its button frame (decouples data from view). */
public HashMap<int, framehandle> heroBtnById = new HashMap<int, framehandle>()

/** Optional: per-player search query (kept outside DraftUIState to avoid class edits). */
HashMap<int, string> searchByPid = new HashMap<int, string>()

/** Registered listeners for hero pick events. */
LinkedList<HeroPickListener> pickListeners = new LinkedList<HeroPickListener>()

CategoryType array categoryTypeArray

/** For category/hero button text base labels (so we can toggle visuals). */
public string array categoryLabelByIndex

/** Remember category label text for index (1..MAX_CATEGORIES). */
public function registerCategoryLabel(int idx, string label)
    categoryLabelByIndex[idx] = label

/** Compare two heroes by full name (case-insensitive). */
public function compareFullNames(HeroDraft a, HeroDraft b) returns int
    return stringCompare(a.fullName().toLowerCase(), b.fullName().toLowerCase())

/** Insert hero into a LinkedList keeping alphabetical order by full name. */
public function insertOrdered(LinkedList<HeroDraft> list, HeroDraft h)
    var i = 0
    for cur in list
        if compareFullNames(h, cur) < 0
            list.addAt(h, i)
            return
        i++
    list.add(h)

/** Selected hero per player (for ON/TRUE highlight). */
HashMap<int, int> selectedHeroByPid = new HashMap<int, int>()

/** Mark hero button selected/unselected by text color + check glyph. */
public function setButtonSelected(framehandle f, string baseText, boolean on)
    if on
        BlzFrameSetText(f, "|cff81b862✓ " + baseText + "|r")
    else
        BlzFrameSetText(f, baseText)

/** Refresh ON/TRUE visuals for category buttons. */
public function updateCategoryButtonsVisual(int pid)
    let st = getOrCreateState(pid)
    if GetLocalPlayer() == Player(pid)
        for i = 1 to MAX_CATEGORIES
            let f = categoryBtns[i]
            if f != null
                let cat = categoryTypeArray[i]
                let on = st.categories.has(cat)
                let base = categoryLabelByIndex[i]
                setButtonSelected(f, base, on)

/** Refresh ON/TRUE visuals for hero buttons for the local player. */
public function updateHeroSelectionVisual(int pid)
    if GetLocalPlayer() != Player(pid)
        return
    let sel = selectedHeroByPid.get(pid)
    for h in allHeroes
        let f = getHeroButton(h.unitID)
        if f != null
            let on = sel != 0 and sel == h.unitID
            setButtonSelected(f, h.fullName(), on)

/** 
 * Per-player draft UI state.  
 * Stores which categories are selected,  
 * current page index, and max page available. 
 */
class DraftUIState
    LinkedList<CategoryType> categories
    int currentPage
    int maxPage

    construct()
        categories = new LinkedList<CategoryType>()
        currentPage = 1
        maxPage = 1

/** Add Category Type to Hero */
public enum CategoryType
    STRENGTH
    AGILITY
    INTELLIGENCE
    BRUISER
    CARRY
    SUPPORT
    MELEE
    RANGE

/** 
 * Hero draft entry.  
 * Wraps hero metadata (id, name, franchise, ranged flag, categories)  
 * and stores a reference to the button frame. 
 */
public class HeroDraft
    int unitID
    string name
    string aftername
    string franchise
    LinkedList<CategoryType> categories
    framehandle btn

    construct()
        this.unitID = 0
        this.name = ""
        this.aftername = ""
        this.franchise = ""
        this.categories = new LinkedList<CategoryType>()
        this.btn = null

    construct(int unitID, string name, string aftername, string franchise)
        this.unitID = unitID
        this.name = name
        this.aftername = aftername
        this.franchise = franchise
        this.categories = new LinkedList<CategoryType>()
        this.btn = btn(name)..setHeight(heroIconSize)..setWidth(heroIconSize)

    /** Returns hero full name (name + aftername if present). */
    function fullName() returns string
        if aftername != ""
            return name + " " + aftername
        return name

    /** Adds categories to this hero, up to 30 unique categories. */
    function addCategory(vararg CategoryType categories) returns LinkedList<CategoryType>
        for category in categories
            if this.categories.size() >= 30
                return this.categories
            if not this.categories.has(category)
                this.categories.add(category)
        return this.categories

    /**
    * Register a hero into the draft pool (data only).
    * Button creation is handled separately via buildHeroButtons().
    */
    function addHero(int id, string name, string aftername, string franchise)
        this.unitID = id
        this.name = name
        this.aftername = aftername
        this.franchise = franchise

        if name == ""
            print("|cffff0000addHero: name cannot be empty.|r")
            return

        if heroById.has(id)
            print("|cffff0000Duplicate hero id:|r " + id.toString() + " — ignoring second registration.")
            return

        insertOrdered(allHeroes, this)
        heroById.put(this.unitID, this)

public interface HeroPickListener
    function onHeroPicked(int pid, int unitID)

public function addHeroPickListener(HeroPickListener l)
    if l != null
        pickListeners.add(l)

public function notifyHeroPicked(int pid, int unitID)
    for l in pickListeners
        l.onHeroPicked(pid, unitID)

/** Associate a pre-created button with a hero id. */
public function setHeroButton(int id, framehandle f)
    if f != null
        heroBtnById.put(id, f)

/** Get the button frame for a hero id, or null if not set. */
public function getHeroButton(int id) returns framehandle
    return heroBtnById.get(id)

/** Creates simple buttons for every registered hero and stores them in heroBtnById. */
public function buildHeroButtons()
    for h in allHeroes
        if getHeroButton(h.unitID) == null
            let b = btn(h.fullName())..setHeight(heroIconSize)..setWidth(heroIconSize)
            setHeroButton(h.unitID, b)

public function setSearchQuery(int pid, string q)
    var s = q
    if s == null
        s = ""
    searchByPid.put(pid, s)

public function getSearchQuery(int pid) returns string
    let s = searchByPid.get(pid)
    if s == null
        return ""
    return s

/** Name/franchise substring match (case-insensitive). Empty query always matches. */
public function heroMatchesQuery(HeroDraft h, string q) returns bool
    if q == ""
        return true
    let s = q.toLowerCase()
    if h.name.toLowerCase().contains(s)
        return true
    if h.aftername.toLowerCase().contains(s)
        return true
    if h.franchise.toLowerCase().contains(s)
        return true
    return false

/** 
 * Ensure a DraftUIState exists for a player.  
 * Creates and inserts one if missing. 
 */
public function getOrCreateState(int pid) returns DraftUIState
    let st = uiState.get(pid)
    if st == null
        let ns = new DraftUIState()
        uiState.put(pid, ns)
        return ns
    return st

/** 
 * Checks if hero matches all selected categories.  
 * Empty selection always matches. 
 */
public function matchesAll(HeroDraft h, LinkedList<CategoryType> selected) returns bool
    if selected.isEmpty()
        return true
    for cat in selected
        if not h.categories.has(cat)
            return false
    return true

/** Count heroes matching current filters (categories + search) for a player. */
public function countFiltered(int pid) returns int
    let st = getOrCreateState(pid)
    let q = getSearchQuery(pid)
    var n = 0
    for h in allHeroes
        if matchesAll(h, st.categories) and heroMatchesQuery(h, q)
            n++
    return n

/** Preview how many heroes would show if we (also) had `cat` selected. */
public function countIfAdded(int pid, CategoryType cat) returns int
    let st = getOrCreateState(pid)
    let tmp = new LinkedList<CategoryType>()
    for c in st.categories
        tmp.add(c)
    if not tmp.has(cat)
        tmp.add(cat)
    let q = getSearchQuery(pid)

    var n = 0
    for h in allHeroes
        if matchesAll(h, tmp) and heroMatchesQuery(h, q)
            n++
    return n

/** Enable/disable category buttons based on whether they would produce any results. */
public function updateCategoryButtonsUX(int pid)
    let st = getOrCreateState(pid)
    if GetLocalPlayer() == Player(pid)
        for i = 1 to MAX_CATEGORIES
            if categoryBtns[i] != null
                let cname = categoryTypeArray[i]
                let selected = st.categories.has(cname)
                let cnt = countIfAdded(pid, cname)
                BlzFrameSetEnable(categoryBtns[i], selected or cnt > 0)

/** Clamp a page number into range [1..maxP]. */
public function clampPage(int page, int maxP) returns int
    if page < 1
        return 1
    if page > maxP
        return maxP
    return page

/** 
 * Update enabled/disabled state of page buttons for a player.  
 * Runs locally (per player). 
 */
public function updatePageButtons(int pid)
    let st = getOrCreateState(pid)
    if GetLocalPlayer() == Player(pid)
        for i = 1 to MAX_PAGES
            if pageBtns[i] != null
                if i <= st.maxPage
                    BlzFrameSetEnable(pageBtns[i], true)
                else
                    BlzFrameSetEnable(pageBtns[i], false)

/**
 * Refresh hero grid for a player.
 * Now uses heroBtnById instead of h.btn, cancels old anims,
 * and clears tracked pos for new frames so they animate in.
 */
public function refreshGrid(int pid)
    let st = getOrCreateState(pid)
    let total = countFiltered(pid)

    var maxP = (total + PER_PAGE - 1) div PER_PAGE
    if maxP < 1
        maxP = 1
    st.maxPage = maxP
    st.currentPage = clampPage(st.currentPage, st.maxPage)

    updatePageButtons(pid)
    updateCategoryButtonsUX(pid)
    updateCategoryButtonsVisual(pid)

    if GetLocalPlayer() != Player(pid)
        return

    let filtered = new LinkedList<HeroDraft>()
    let q = getSearchQuery(pid)
    for h in allHeroes
        if matchesAll(h, st.categories) and heroMatchesQuery(h, q)
            filtered.add(h)

    var startIdx = (st.currentPage - 1) * PER_PAGE
    if startIdx < 0
        startIdx = 0
    var endIdx = startIdx + PER_PAGE - 1
    let lastIdx = filtered.size() - 1
    if endIdx > lastIdx
        endIdx = lastIdx

    let shouldShow = new LinkedList<framehandle>()
    var idx = 0
    for h in filtered
        if idx >= startIdx and idx <= endIdx
            let f = getHeroButton(h.unitID)
            if f != null
                shouldShow.add(f)
        idx++

    for f in shownNow
        if not shouldShow.has(f)
            heroGrid.remove(f)
            BlzFrameSetVisible(f, false)

    cancelGridAnimations()

    for f in shouldShow
        if not shownNow.has(f)
            BlzFrameSetVisible(f, true)
            heroGrid.add(f)

    shownNow.clear()
    for f in shouldShow
        shownNow.add(f)

    heroGrid.layoutAnimated(0.20)

    // after layout, refresh hero ON/TRUE visuals for local player
    updateHeroSelectionVisual(pid)


/** Connect all hero buttons to notifyHeroPicked. Safe to call after buildHeroButtons(). */
public function wireHeroButtons()
    for h in allHeroes
        let f = getHeroButton(h.unitID)
        if f != null
            let hid = h.unitID
            f.onClick() ->
                let pid = GetPlayerId(GetTriggerPlayer())
                selectedHeroByPid.put(pid, hid)
                updateHeroSelectionVisual(pid)
                notifyHeroPicked(pid, hid)

/** Toggle categories and refresh; also updates button enabled-states. */
public function wireCategoryButtons()
    for i = 1 to MAX_CATEGORIES
        if categoryBtns[i] != null
            let idx = i
            categoryBtns[idx].onClick() ->
                let pid = GetPlayerId(GetTriggerPlayer())
                let st = getOrCreateState(pid)
                let cname = categoryTypeArray[idx]
                if st.categories.has(cname)
                    st.categories.remove(cname)
                else
                    st.categories.add(cname)
                st.currentPage = 1
                updateCategoryButtonsUX(pid)
                updateCategoryButtonsVisual(pid)
                refreshGrid(pid)

/** 
 * Wire page buttons to change pages.  
 * Ignores clicks if target page is greater than maxPage. 
 */
public function wirePageButtons()
    for i = 1 to MAX_PAGES
        if pageBtns[i] != null
            let idx = i
            pageBtns[idx].onClick() -> 
                let pid = GetPlayerId(GetTriggerPlayer())
                let st = getOrCreateState(pid)
                if idx <= st.maxPage
                    st.currentPage = idx
                    refreshGrid(pid)

public function setupHeroButtons()
    buildHeroButtons()
    wireHeroButtons()

init
    categoryTypeArray[1] = CategoryType.STRENGTH
    categoryTypeArray[2] = CategoryType.AGILITY
    categoryTypeArray[3] = CategoryType.INTELLIGENCE
    categoryTypeArray[4] = CategoryType.BRUISER
    categoryTypeArray[5] = CategoryType.CARRY
    categoryTypeArray[6] = CategoryType.SUPPORT
    categoryTypeArray[7] = CategoryType.MELEE
    categoryTypeArray[8] = CategoryType.RANGE