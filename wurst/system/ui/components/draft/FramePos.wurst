package FramePos
import HashMap

/** Represents a remembered position of a frame.
 *  - `x`, `y`: coordinates in the UI system (0.0–1.0 is the screen range).
 *  - `isRelative`: whether the frame was placed relative to its parent (`true`) or absolutely (`false`).
 *  - `anchor`: which framepoint (e.g. FRAMEPOINT_CENTER, TOPLEFT, …) was used.
 */
public class FramePos
    real x
    real y
    boolean isRelative
    framepointtype anchor

    construct(real x, real y, boolean isRelative, framepointtype anchor)
        this.x = x
        this.y = y
        this.isRelative = isRelative
        this.anchor = anchor

    /** Linear interpolation (lerp) between two frame positions.
     *  Takes a target FramePos and a fraction `t` between 0 and 1.
     *  Example: t = 0.0 → this, t = 1.0 → target, t = 0.5 → halfway.
     */
    function lerp(FramePos target, real t) returns FramePos
        return new FramePos(
            this.x + (target.x - this.x) * t,
            this.y + (target.y - this.y) * t,
            this.isRelative, // assume same type as start
            this.anchor
        )

// Stores the last known position of frames (absolute or relative).
constant posMap = new HashMap<framehandle, FramePos>()

/** Sets the absolute position of a frame, and remembers it.
 *  This clears all previous anchors and places it exactly at (x,y) in screen coords.
 */
public function setAbsPointTracked(framehandle f, framepointtype point, real x, real y)
    BlzFrameClearAllPoints(f)
    BlzFrameSetAbsPoint(f, point, x, y)
    posMap.put(f, new FramePos(x, y, false, point))

/** Sets the relative position of a frame to its parent, and remembers it.
 *  Places the frame’s anchor relative to the parent’s top-left corner.
 */
public function setRelativePointTracked(framehandle f, framepointtype point, real x, real y)
    BlzFrameClearAllPoints(f)
    BlzFrameSetPoint(f, point, BlzFrameGetParent(f), FRAMEPOINT_TOPLEFT, x, y)
    posMap.put(f, new FramePos(x, y, true, point))

/** Clears the stored tracked position of a frame.
 *  Use this if you want to “forget” where a frame was last placed.
 */
public function clearTrackedPos(framehandle f)
    posMap.remove(f)

/** Gets the last stored position of a frame, or null if it was never tracked. */
public function getPos(framehandle f) returns FramePos
    return posMap.get(f)

/** Moves a frame by an offset from its last tracked position.
 *  - dx, dy: how far to move from the last stored position.
 *  If no position is tracked yet, nothing happens.
 */
public function offsetPos(framehandle f, real dx, real dy)
    let old = getPos(f)
    if old != null
        setAbsPointTracked(f, FRAMEPOINT_CENTER, old.x + dx, old.y + dy)