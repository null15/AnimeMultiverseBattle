package GridTableWrapper

import FlowGrid
import TableLayout

/**
 * A wrapper that allows using `SimpleGrid` as a cell inside `TableLayout`.
 *
 * - Wraps the grid inside a container frame so `TableLayout` can manage it.
 * - You can still access the underlying grid (`getGrid()`) directly.
 * - Useful when mixing flexible table layouts with animated grids.
 */
public class GridCell
    private SimpleGrid grid
    private framehandle containerFrame
    private real containerWidth
    private real containerHeight

    /**
     * Create a new grid cell.
     * - `width`, `height`: size of the container frame
     * - `cols`: number of columns in the grid
     * - `cellW`, `cellH`: width/height of each cell inside the grid
     * - `gap`: spacing between cells
     */
    construct(real width, real height, int cols, real cellW, real cellH, real gap)
        let padX = 0.015   // small horizontal padding
        let padY = -0.015  // small vertical padding
        this.containerWidth = width
        this.containerHeight = height

        // Container frame that TableLayout can work with
        containerFrame = createFrame("FRAME", "GridCellContainer", defaultFrameParent, null, 0)
            ..setSize(width, height)

        // Grid sits inside the container
        grid = new SimpleGrid(padX, padY, cols, cellW, cellH, gap)
        grid.containerFrame = containerFrame

    /** Get the container frame used by TableLayout. */
    function getFrame() returns framehandle
        return containerFrame

    /** Get the underlying SimpleGrid (for direct control). */
    function getGrid() returns SimpleGrid
        return grid

    /** Add a frame to the grid. */
    function add(framehandle f)
        grid.add(f)

    /** Remove a frame from the grid. */
    function remove(framehandle f)
        grid.remove(f)

    /** Place all items instantly (no animation). */
    function layoutInstant()
        grid.layoutInstant()

    /** Animate items into their slots over the given duration. */
    function layoutAnimated(real duration)
        grid.layoutAnimated(duration)

    /**
     * Wrap this grid cell in a framed container with a backdrop.
     * - Useful for visual grouping (e.g. a bordered box).
     * - The gridâ€™s container will be re-parented into this new frame.
     */
    function createFramedContainer(framehandle parent) returns framehandle
        let outer = createFrame("FRAME", "GridCellFramed", parent, null, 0)
            ..setSize(containerWidth, containerHeight)

        createFrame("HeroPickMenuBackdrop", outer, 0, 0)..setAllPoints(outer)

        containerFrame.setParent(outer)
        containerFrame.setAllPoints(outer)

        return outer

