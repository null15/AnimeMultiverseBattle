package Transformation

import ClosureTimers
import HashMap
import unitDefinitions
import Entity

public class Transformation
	unit actor
	int originalSkin
	IterableMap<int,int> swaps
	unit bar
	CallbackSingle cb
	CallbackPeriodic cbPeriodic

	construct(unit actor, int newSkin, IterableMap<int,int> swaps, real duration)
		this.actor = actor
		this.swaps = swaps
		this.originalSkin = BlzGetUnitSkin(this.actor)

		// Unit Skin & Abilities
		BlzSetUnitSkin(this.actor, newSkin)
		swaps.forEach() (int baseAbil, int transAbil) ->
			this.actor.removeAbility(baseAbil)
			this.actor.addAbility(transAbil)

		// Progress Bar
		this.bar = createUnit(this.actor.getOwner(), PROGRESS_BAR_DUMMY, this.actor.getEntity() != null ? this.actor.getEntity().getPos().add(0, 0, 400) : this.actor.getPos3Real().add(0, 0, 400), angle(270))
		this.bar..setTimeScale(((1 / duration) * 100) * 0.01)..setVertexColor(this.actor.getOwner().getColor().toColor())

		// Timer Stuff
		this.cbPeriodic = doPeriodically(0.032) (CallbackPeriodic cb) ->
			this.bar.setPosReal(this.actor.getEntity() != null ? this.actor.getEntity().getPos().add(0, 0, 300) : this.actor.getPos3Real().add(0, 0, 300))
		this.cb = doAfter(duration) ->
			finish()

	function finish()
		this.swaps.forEach() (int baseAbil, int transAbil) ->
			this.actor.removeAbility(transAbil)
			this.actor.addAbility(baseAbil)
		BlzSetUnitSkin(this.actor, this.originalSkin)
		if this.bar != null
			this.bar.remove()
			this.bar = null
		this.cb = null
		this.cbPeriodic = null
		destroy this

	ondestroy
		if this.cb != null
			destroy this.cb
			destroy this.cbPeriodic
		if this.bar != null
			this.bar.remove()
		destroy this.swaps