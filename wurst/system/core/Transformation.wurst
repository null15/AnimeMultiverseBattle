package Transformation

import HashMap
import unitDefinitions
import Entity

public class Transformation
    unit actor
    real duration
    real elapsed = 0.
    int originalSkin
    IterableMap<int, int> abilMap
    unit bar
    vec3 actorPos

    construct(unit actor, real duration, int newSkin, IterableMap<int, int> abilMap)
        this.actor = actor
        this.duration = duration
        this.originalSkin = actor.getTypeId()
        this.abilMap = abilMap
        this.actorPos = this.actor.getEntity() != null ? this.actor.getEntity().getPos().add(0, 0, 150) : this.actor.getPos3Real().add(0, 0, 150)

        BlzSetUnitSkin(this.actor, newSkin)

        for abil in this.abilMap
            if this.actor.hasAbility(abil)
                this.actor.removeAbility(abil)
            this.actor.addAbility(abilMap.get(abil))
        this.bar = createUnitZ(this.actor.getOwner(), PROGRESS_BAR_DUMMY, actorPos, angle(0))
        ..setAnimation(0)

    function update(real dt) returns boolean
        this.elapsed += dt
        this.actorPos = this.actor.getEntity() != null ? this.actor.getEntity().getPos() : this.actor.getPos3Real()
        this.bar
        ..setAnimation((this.elapsed / this.duration * 100).toInt())
        ..setPosFly(actorPos)
        if this.elapsed >= this.duration
            finish()
            return true
        return false

    function finish()
        BlzSetUnitSkin(this.actor, this.originalSkin)
        for abil in this.abilMap
            let newAbil = this.abilMap.get(abil)
            if this.actor.hasAbility(newAbil)
                this.actor.removeAbility(newAbil)
            this.actor.addAbility(abil)
        if this.bar != null
            this.bar.remove()
            this.bar = null
        destroy this.abilMap
        this.abilMap = null

    ondestroy
        if this.bar != null
            this.bar.remove()
        if this.abilMap != null
            destroy this.abilMap