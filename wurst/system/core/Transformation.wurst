package Transformation

import HashMap

public class Transformation
    unit actor
    real duration
    real elapsed = 0.
    int originalSkin
    IterableMap<int, int> abilMap
    effect bar

    construct(unit actor, real duration, int newSkin, IterableMap<int, int> abilMap)
        this.actor = actor
        this.duration = duration
        originalSkin = actor.getTypeId()
        this.abilMap = abilMap

        BlzSetUnitSkin(actor, newSkin)

        for abil in abilMap
            if actor.hasAbility(abil)
                actor.removeAbility(abil)
            actor.addAbility(abilMap.get(abil))

        bar = AddSpecialEffectTarget("Progressbar.mdx", actor, "overhead")
        bar.setTime(0.)
        bar.setTimeScale(1. / duration)

    function update(real dt) returns boolean
        elapsed += dt
        if elapsed >= duration
            finish()
            return true
        return false

    function finish()
        BlzSetUnitSkin(actor, originalSkin)
        for abil in abilMap
            let newAbil = abilMap.get(abil)
            if actor.hasAbility(newAbil)
                actor.removeAbility(newAbil)
            actor.addAbility(abil)
        if bar != null
            bar.destr()
            bar = null
        destroy abilMap
        abilMap = null

    ondestroy
        if bar != null
            bar.destr()
        if abilMap != null
            destroy abilMap
