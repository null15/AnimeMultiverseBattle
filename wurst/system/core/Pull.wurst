package Pull

import ClosureTimers
import HashMap
import EntitySystem
import EntityManagement
import Utility
import TimeStop

public interface UnitFilter
	function get(unit which) returns bool

UnitFilter UNIT_FILTER = (unit u) -> not u.isGiant()

public class Pull
	static HashMap<unit, Pull> active = new HashMap<unit, Pull>

	unit actor
	vec2 destination
	unit destinationUnit
	real stopRange
	real speed
	CallbackPeriodic cb
	bool finished

	construct(unit actor, vec2 destination, real stopRange, real speed, unit destinationUnit)
		if active.has(actor)
			active.get(actor).stop()
		this.actor = actor
		this.destination = destination
		this.destinationUnit = destinationUnit
		this.stopRange = stopRange
		this.speed = speed
		this.finished = false
		this.actor.setPathing(false)
		active.put(actor, this)
		this.cb = doPeriodically(0.03125) (CallbackPeriodic c) ->
			this.update()

	function update()
		if this.actor == null or not this.actor.isAliveTrick()
			stop()
			return
		if this.actor.isAbsolutePausedTimed() or this.actor.isTimeStopped()
			return
		if this.destinationUnit != null
			if not this.destinationUnit.isAlive()
				stop()
				return
			if this.destinationUnit.isTimeStopped()
				return
			this.destination = this.destinationUnit.getPos()
		let currentPos = this.actor.getPos()
		let diff = this.destination - currentPos
		let dist = diff.length()
		if dist <= this.stopRange
			stop()
			return
		let iter = diff.norm() * this.speed * 0.03125
		let nextPos = currentPos + iter
		if not nextPos.isTerrainWalkable()
			stop()
			return
		this.actor.setPos(nextPos)

	function stop()
		if this.finished
			return
		this.finished = true
		if this.actor != null
			this.actor.setPathing(true)
			active.remove(this.actor)
		if this.cb != null
			destroy this.cb
			this.cb = null
		destroy this

	static function getActive(unit actor) returns Pull
		if actor == null
			return null
		if active.has(actor)
			return active.get(actor)
		return null

	static function stopActive(unit actor)
		let inst = getActive(actor)
		if inst != null
			inst.stop()

	static function toUnit(unit target, unit source, real stopRange, real speed) returns Pull
		if target == null or source == null or not UNIT_FILTER.get(target)
			return null
		if target != null and source != null
			if target == source
				printLog(Loglevel.ERROR, "Attempted to cast Pull onto themselves. Unit in question (source): |cffffd700" + source.getName() + "|r and (target): |cffffd700" + target.getName() + "|r")
				return null
		return new Pull(target, source.getPos(), stopRange, speed, source)

	static function toPoint(unit target, vec2 point, real stopRange, real speed) returns Pull
		if target == null or not UNIT_FILTER.get(target)
			return null
		return new Pull(target, point, stopRange, speed, null)

	ondestroy
		this.actor = null
		this.cb = null
		this.destinationUnit = null