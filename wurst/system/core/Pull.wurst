package Pull

import ClosureTimers
import HashMap

public interface PullEasing
	function get(real t) returns real

@configurable let PERIOD = 0.032
@configurable PullEasing DEFAULT_EASING = (real t) -> t
@configurable real DEFAULT_STOP_DISTANCE = 5.

public class Pull
	static HashMap<unit, Pull> active = new HashMap<unit, Pull>()
	unit target
	vec2 startPos
	vec2 endPos
	real distance
	PullEasing easing
	real stopDistance
	// optional callback invoked when the pull finishes
	Callback onFinish
	CallbackCounted cb

	construct(unit target, vec2 endPos, real duration, PullEasing easing, real stopDist, Callback onFinish)
		if active.has(target)
			active.get(target).cancel()
		this.target = target
		this.startPos = target.getPos()
		this.endPos = endPos
		this.distance = (endPos - this.startPos).length()
		this.easing = easing
		this.stopDistance = stopDist
		this.onFinish = onFinish
		active.put(target, this)
		let direction = (endPos - this.startPos).norm()
		this.cb = doPeriodicallyTimed(PERIOD, duration) (CallbackCounted c) ->
			if this.target.isAlive()
				let currentDist = (this.target.getPos() - this.endPos).length()
				if currentDist <= this.stopDistance
					this.target.setPos(this.endPos)
					finish()
				else
					let progress = this.easing.get(c.progress())
					this.target.setPos(this.startPos + direction * (this.distance * progress))
					if c.isLast()
						this.target.setPos(this.endPos)
						finish()
			else
				finish()

	static function toPointTimed(unit target, vec2 dest, real duration) returns Pull
		return Pull.toPointTimed(target, dest, duration, DEFAULT_EASING, DEFAULT_STOP_DISTANCE)

	static function toPointTimed(unit target, vec2 dest, real duration, PullEasing easing) returns Pull
		return Pull.toPointTimed(target, dest, duration, easing, DEFAULT_STOP_DISTANCE)

	static function toPointTimed(unit target, vec2 dest, real duration, PullEasing easing, real stopDist) returns Pull
		return Pull.toPointTimed(target, dest, duration, easing, stopDist, null)

	static function toPointTimed(unit target, vec2 dest, real duration, PullEasing easing, real stopDist, Callback onFinish) returns Pull
		if not target.isAlive()
			return null
		return new Pull(target, dest, duration, easing, stopDist, onFinish)

	static function toPoint(unit target, vec2 dest, real speed) returns Pull
		return Pull.toPoint(target, dest, speed, DEFAULT_EASING, DEFAULT_STOP_DISTANCE)

	static function toPoint(unit target, vec2 dest, real speed, PullEasing easing) returns Pull
		return Pull.toPoint(target, dest, speed, easing, DEFAULT_STOP_DISTANCE)

	static function toPoint(unit target, vec2 dest, real speed, PullEasing easing, real stopDist) returns Pull
		return Pull.toPoint(target, dest, speed, easing, stopDist, null)

	static function toPoint(unit target, vec2 dest, real speed, PullEasing easing, real stopDist, Callback onFinish) returns Pull
		let distance = (dest - target.getPos()).length()
		if speed <= 0. or distance <= 0.
			return null
		let duration = distance / speed
		return Pull.toPointTimed(target, dest, duration, easing, stopDist, onFinish)

	static function towardsPoint(unit target, vec2 source, real distance, real duration) returns Pull
		return Pull.towardsPoint(target, source, distance, duration, DEFAULT_EASING, DEFAULT_STOP_DISTANCE)

	static function towardsPoint(unit target, vec2 source, real distance, real duration, PullEasing easing) returns Pull
		return Pull.towardsPoint(target, source, distance, duration, easing, DEFAULT_STOP_DISTANCE)

	static function towardsPoint(unit target, vec2 source, real distance, real duration, PullEasing easing, real stopDist) returns Pull
		return Pull.towardsPoint(target, source, distance, duration, easing, stopDist, null)

	static function towardsPoint(unit target, vec2 source, real distance, real duration, PullEasing easing, real stopDist, Callback onFinish) returns Pull
		if not target.isAlive()
			return null
		let toSource = source - target.getPos()
		var moveDist = distance
		let distToSource = toSource.length()
		if distToSource < moveDist
			moveDist = distToSource
		if moveDist <= 0.
			return null
		let dest = target.getPos() + toSource.norm() * moveDist
		return new Pull(target, dest, duration, easing, stopDist, onFinish)

	static function toUnit(unit target, unit source, real speed) returns Pull
		return Pull.toUnit(target, source, speed, DEFAULT_EASING, DEFAULT_STOP_DISTANCE)

	static function toUnit(unit target, unit source, real speed, PullEasing easing) returns Pull
		return Pull.toUnit(target, source, speed, easing, DEFAULT_STOP_DISTANCE)

	static function toUnit(unit target, unit source, real speed, PullEasing easing, real stopDist) returns Pull
		return Pull.toUnit(target, source, speed, easing, stopDist, null)

	static function toUnit(unit target, unit source, real speed, PullEasing easing, real stopDist, Callback onFinish) returns Pull
		return Pull.toPoint(target, source.getPos(), speed, easing, stopDist, onFinish)

	static function toUnitTimed(unit target, unit source, real duration) returns Pull
		return Pull.toUnitTimed(target, source, duration, DEFAULT_EASING, DEFAULT_STOP_DISTANCE)

	static function toUnitTimed(unit target, unit source, real duration, PullEasing easing) returns Pull
		return Pull.toUnitTimed(target, source, duration, easing, DEFAULT_STOP_DISTANCE)

	static function toUnitTimed(unit target, unit source, real duration, PullEasing easing, real stopDist) returns Pull
		return Pull.toUnitTimed(target, source, duration, easing, stopDist, null)

	static function toUnitTimed(unit target, unit source, real duration, PullEasing easing, real stopDist, Callback onFinish) returns Pull
		return Pull.toPointTimed(target, source.getPos(), duration, easing, stopDist, onFinish)

	static function towardsUnit(unit target, unit source, real distance, real duration) returns Pull
		return Pull.towardsUnit(target, source, distance, duration, DEFAULT_EASING, DEFAULT_STOP_DISTANCE)

	static function towardsUnit(unit target, unit source, real distance, real duration, PullEasing easing) returns Pull
		return Pull.towardsUnit(target, source, distance, duration, easing, DEFAULT_STOP_DISTANCE)

	static function towardsUnit(unit target, unit source, real distance, real duration, PullEasing easing, real stopDist) returns Pull
		return Pull.towardsUnit(target, source, distance, duration, easing, stopDist, null)

	static function towardsUnit(unit target, unit source, real distance, real duration, PullEasing easing, real stopDist, Callback onFinish) returns Pull
		return Pull.towardsPoint(target, source.getPos(), distance, duration, easing, stopDist, onFinish)

	function cancel()
		finish()

	function finish()
		if this.cb != null
			destroy this.cb
			this.cb = null
		active.remove(this.target)
		if this.onFinish != null
			this.onFinish.call()
			this.onFinish = null
		destroy this

	ondestroy
		if this.cb != null
			destroy this.cb
			this.cb = null
		if active.has(this.target)
			active.remove(this.target)