package Texttag
import NoWurst
import public Vectors
import public Colors
import Player
import Unit

public function texttag.setPos(real x, real y, real z)
	SetTextTagPos(this, x ,y , z)

public function texttag.setPos(vec3 pos)
	SetTextTagPos(this, pos.x , pos.y , pos.z)

public function texttag.setColor(int r, int g, int b, int a)
	SetTextTagColor(this, r, g , b, a)

public function texttag.setSuspended(boolean flag)
	SetTextTagSuspended(this, flag)

public function texttag.setColor(colorA col)
	SetTextTagColor(this, col.red, col.green , col.blue, col.alpha)

public function texttag.setText(string text, real size)
	SetTextTagText(this, text, size * 0.0023)

public function texttag.setLifespan(real span)
	SetTextTagLifespan(this, span)

public function texttag.setPermanent(boolean flag)
	SetTextTagPermanent(this, flag)

public function texttag.setFadepoint(real fadepoint)
	SetTextTagFadepoint(this, fadepoint)

public function texttag.setAge(real age)
	SetTextTagAge(this, age)

public function texttag.setVelocity(real xvel, real yvel)
	SetTextTagVelocity(this, xvel, yvel)

public function texttag.setVelocity(vec2 vel)
	SetTextTagVelocity(this, vel.x, vel.y)

public function texttag.setVisibility(boolean flag)
	SetTextTagVisibility(this, flag)

/** Change the visibility based on whether the local player can see the given unit.
    This won't update if the unit moves or the local player gains vision of it. */
public function texttag.matchVisibility(unit target)
	this.setVisibility(localPlayer.hasVisibility(target))

/** Change the visibility based on whether the local player can see the given position.
    This won't update if local player gains vision of it. */
public function texttag.matchVisibility(vec2 pos)
	this.setVisibility(localPlayer.hasVisibility(pos))

/** Match the visibility and position of the texttag to the given unit.
    This won't update if the unit moves or the local player gains vision of it. */
public function texttag.match(unit target)
	this.match(target, vec2(0, 0))

/** Match the visibility and position with an offest of the texttag to the given unit.
    This won't update if the unit moves or the local player gains vision of it. */
public function texttag.match(unit target, vec2 offset)
	this.setPos((target.getPos() + offset).toVec3())
	this.matchVisibility(target)

public function texttag.destr()
	DestroyTextTag(this)

public function createTTEx(vec3 pos, string message, real size) returns texttag
	return CreateTextTag()
		..setPermanent(true)
		..setText(message, size)
		..setPos(pos)
		..setVisibility(true)

public function createTTEx(vec3 pos, string message, real size, colorA col) returns texttag
	return CreateTextTag()
		..setPos(pos.toVec2().withZ(20.))
		..setText(message, size)
		..setColor(col)
		..setVisibility(true)

public function createTTEx(vec3 pos, string message, real size, colorA col, player p) returns texttag
	return CreateTextTag()
		..setPos(pos.toVec2().withZ(20.))
		..setText(message, size)
		..setColor(col)
		..setVisibility(localPlayer == p)

public function createTTEx(vec3 pos, vec2 vel, string message, real size, real duration, colorA col) returns texttag
	return CreateTextTag()
		..setPos(pos.toVec2().withZ(20.))
		..setText(message, size)
		..setColor(col)
		..setVelocity(vel.x, vel.y)
		..setLifespan(duration)
		..setFadepoint(.1)
		..setPermanent(false)

public function createTTEx(vec3 pos, vec2 vel, string message, real size, real duration, colorA col, player p) returns texttag
	return createTTEx(pos, vel, message,size,duration,col)
		..setVisibility(localPlayer == p)

